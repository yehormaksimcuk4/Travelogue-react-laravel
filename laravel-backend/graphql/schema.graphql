# resources/graphql/schema.graphql

scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    users(name: String @where(operator: "like")): [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"]), email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])): User @find
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
    photos: [Photo!]! @hasMany
    itineraries: [Itinerary!]! @hasMany
}

type Post {
    id: ID!
    content: String!
    user: User! @belongsTo
    created_at: DateTime!
}

type Photo {
    id: ID!
    image_path: String!
    user: User! @belongsTo
    created_at: DateTime!
}

type Itinerary {
    id: ID!
    description: String!
    user: User! @belongsTo
    created_at: DateTime!
}

extend type Mutation {
    createUser(name: String!, email: String!, password: String!): User @create
    createPost(user_id: ID!, content: String!): Post @create
    createPhoto(user_id: ID!, image_path: Upload!): Photo
    createItinerary(user_id: ID!, description: String!): Itinerary @create
    login(email: String!, password: String!): AuthPayload
    logout: Boolean
    createPost(user_id: ID!, content: String!): Post @create
    createItinerary(user_id: ID!, description: String!): Itinerary @create
}

type AuthPayload {
    token: String
    user: User
}
