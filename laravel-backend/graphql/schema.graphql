# resources/graphql/schema.graphql

scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    users(name: String @where(operator: "like")): [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"]), email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])): User @find
     post: [Post!]! @all 
    photo: [Photo!]! @all 
     itinerary: [Itinerary!]! @all
  profile: Profile @find
       savedItems: [SavedItem!]!
    me: User!
      collectionss(user_id: ID!): [Collection!]! @all
        collections(id: ID!): Collection @find
        savedCollectionItems(id: ID!): [SavedItem!]! @field(resolver: "App\\GraphQL\\Queries\\SavedCollectionItems@resolve")
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
     profile: Profile @belongsTo
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
    photos: [Photo!]! @hasMany
    itineraries: [Itinerary!]! @hasMany
      savedItems: [SavedItem!]! @hasMany
       collections: [Collection!]! @hasMany
}

type Profile {
  id: ID!
  user_id: ID!
  profile_pic_path: String
  user: User
}

type Post {
    id: ID!
    content: String!
    user: User! @belongsTo
    created_at: DateTime!
}

type Photo {
    id: ID!
    image_path: String!
    user: User! @belongsTo
    created_at: DateTime!
}

type Itinerary {
    id: ID!
    description: String!
    user: User! @belongsTo
    created_at: DateTime!
}

type DeleteResult {
  success: Boolean!
  message: String
}

type SavedItem {
  id: ID!
  author_id: ID
  user_id: ID
  image_path: String
  created_at: String
  user: User! @belongsTo
    post: Post
  itinerary: Itinerary
  photo: Photo @belongsTo
   collection: Collection @belongsTo
}

type Collection {
    id: ID!
    user_id: ID!
    name: String!
    user: User! @belongsTo
    created_at: DateTime!
    savedItems: [SavedItem!]! @hasMany
}


extend type Mutation {
    createUser(name: String!, email: String!, password: String!): User @create
    createPhoto(user_id: ID!, image_path: String, image: Upload!): Photo
    login(email: String!, password: String!): AuthPayload
    logout: Boolean
    createPost(user_id: ID!, content: String!): Post @create
    createItinerary(user_id: ID!, description: String!): Itinerary @create
      deletePost(id: ID!): DeleteResult
       deleteItinerary(id: ID!): DeleteResult!
       deletePhoto(id: ID!): DeleteResult!
         deleteItinerary(id: ID!): DeleteResult!
        updatePost(id: ID!, content: String!): Post!
  updateItinerary(id: ID!, description: String!): Itinerary!
   saveItem(itemId: ID!): SavedItem!
       createCollection(name: String! user_id: ID!): Collection @create
            addToCollection(photoId: ID!, collectionId: ID!): SavedItem!
}

type AuthPayload {
    token: String
    user: User
}
